---
import type { Content as Props } from "@/types";
import Headline from "@/components/ui/Headline.astro";
import WidgetWrapper from "@/components/ui/WidgetWrapper.astro";
import CustomImage from "@/components/common/CustomImage.astro";
import Button from "@/components/ui/Button/Button.astro";
import ItemGrid from "@/components/ui/ItemGrid/ItemGrid.astro";
import { cn } from "@/utils/cn";

const {
  title = await Astro.slots.render("title"),
  subtitle = await Astro.slots.render("subtitle"),
  description = await Astro.slots.render("description"),
  tagline,
  content = await Astro.slots.render("content"),
  callToAction,
  items = [],
  columns,
  image = await Astro.slots.render("image"),
  isReversed = false,
  isAfterContent = false,
  actions = await Astro.slots.render("actions"),

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render("bg"),
} = Astro.props;
---

<WidgetWrapper
  id={id}
  isDark={isDark}
  containerClass={` mx-auto ${isAfterContent ? "pt-0 lg:pt-0 lg:pt-0" : ""} ${classes?.container ?? ""}`}
  bg={bg}
>
  <Headline
    title={title}
    subtitle={subtitle}
    tagline={tagline}
    description={description}
    classes={classes?.headline as Record<string, string>}
  />
  <div class={cn("mx-auto p-4 lg:px-8", classes?.itemContainer)}>
    <div class={`lg:flex ${isReversed ? "lg:flex-row-reverse" : ""} lg:gap-16`}>
      <div aria-hidden="true" class="mt-10 mb-8 sm:mb-0 lg:mt-0 lg:basis-1/2">
        {
          image && (
            <div class="relative m-auto max-w-4xl">
              {typeof image === "string" ? (
                <Fragment set:html={image} />
              ) : (
                <CustomImage
                  class="mx-auto w-full rounded-lg bg-white shadow-lg"
                  width={500}
                  src={image?.src}
                  alt={image.alt}
                />
              )}
            </div>
          )
        }
      </div>
      <div class="lg:basis-1/2 self-center">
        {
          content && (
            <div
              class={cn("mb-12 text-lg dark:text-white", classes?.content)}
              set:html={content}
            />
          )
        }

        {
          callToAction && (
            <div class="mt-[-40px] mb-8 text-primary">
              <Button variant="link" {...callToAction} />
            </div>
          )
        }
        <ItemGrid
          items={items}
          columns={columns}
          defaultIcon="tabler:check"
          classes={{
            container: `gap-y-4 lg:gap-y-8`,
            panel: "max-w-none",
            title:
              "text-lg font-medium leading-6 dark:text-white ml-2 rtl:ml-0 rtl:mr-2",
            description: "text-muted dark:text-white ml-2 rtl:ml-0 rtl:mr-2",
            icon: "flex h-7 w-7 items-center justify-center rounded-full text-gray-50 p-1",
            action:
              "text-lg font-medium leading-6 dark:text-white ml-2 rtl:ml-0 rtl:mr-2",
          }}
        />
        {
          actions && (
            <div class="pt-8 max-w-xs sm:max-w-md flex flex-nowrap flex-col sm:flex-row items-start justify-start gap-4 lg:m-0 lg:max-w-7xl intersect-once motion-safe:md:intersect:animate-fade intersect-quarter">
              {Array.isArray(actions) ? (
                actions.map((action) => (
                  <div class="flex w-full sm:w-auto">
                    <Button {...(action || {})} class="w-full sm:mb-0" />
                  </div>
                ))
              ) : (
                <Fragment set:html={actions} />
              )}
            </div>
          )
        }
      </div>
    </div>
  </div>
</WidgetWrapper>

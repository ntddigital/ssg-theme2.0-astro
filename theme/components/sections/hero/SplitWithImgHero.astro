---
import CustomImage from '@/components/common/CustomImage.astro';
import Button from '@/components/ui/Button/Button.astro';
import { cn } from '@/utils/cn';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,

  description = await Astro.slots.render('description'),
  actions = await Astro.slots.render('actions'),
  image = await Astro.slots.render('image'),
  // classes = {},

  id,
  bg = await Astro.slots.render('bg'),
  isDark = await Astro.slots.render('isDark'),
  contentBelowActions = await Astro.slots.render('contentBelowactions'),
  classes = {},
} = Astro.props;
---

<section
  class={cn('relative md:-mt-[76px] not-prose', classes?.container, isDark && 'bg-dark dark:bg-transparent dark')}
  {...id ? { id } : {}}
>
  <div class="absolute inset-0 pointer-events-none" aria-hidden="true">
    <slot name="bg">
      <!-- {bg ? <Fragment set:html={bg} /> : null} -->
      <CustomImage
        src={bg?.src}
        alt={bg?.alt}
        class={cn('absolute h-full object-cover object-center')}
        loading="eager"
      />
    </slot>
  </div>
  <div class="relative max-w-7xl mx-auto px-4 sm:px-6">
    <div class="pt-0 md:pt-[76px] pointer-events-none"></div>
    <div class="py-12 md:py-20 lg:py-0 lg:flex lg:items-center lg:h-[calc(100vh-100px)] xl:gap-2">
      <div class="basis-1/2 text-center lg:text-left pb-10 md:pb-16 md:pr-4 mx-auto">
        {
          tagline && (
            <p
              class={cn(
                'dark:text-white text-base text-primary  font-bold tracking-wide uppercase intersect-once motion-safe:md:intersect:animate-fade intersect-quarter',
                classes?.tagline
              )}
              set:html={tagline}
            />
          )
        }
        {
          title && (
            <h1
              class={cn(
                'text-5xl md:text-7xl font-bold leading-relaxed  mb-4 font-heading dark:text-white intersect-once motion-safe:md:intersect:animate-fade intersect-quarter',
                classes?.title
              )}
              set:html={title}
            />
          )
        }
        <div class="max-w-3xl mx-auto lg:max-w-none">
          {
            subtitle && (
              <p
                class={cn(
                  'text-xl text-muted mb-6 dark:text-white intersect-once motion-safe:md:intersect:animate-fade intersect-quarter',
                  classes?.subtitle
                )}
                set:html={subtitle}
              />
            )
          }
        </div>
        {
          description && (
            <div
              class={cn(
                'text-xl text-muted mb-6 dark:text-white intersect-once motion-safe:md:intersect:animate-fade intersect-quarter',
                classes?.description
              )}
              set:html={description}
            />
          )
        }
        {
          actions && (
            <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4 lg:justify-start lg:m-0 lg:max-w-7xl intersect-once motion-safe:md:intersect:animate-fade intersect-quarter">
              {Array.isArray(actions) ? (
                actions.map((action) => (
                  <div class="flex w-full sm:w-auto">
                    <Button {...(action || {})} class="w-full sm:mb-0" />
                  </div>
                ))
              ) : (
                <Fragment set:html={actions} />
              )}
            </div>
          )
        }

        {
          contentBelowActions?.image?.src && (
            <CustomImage
              alt={contentBelowActions?.image?.alt}
              src={contentBelowActions?.image?.src}
              loading="eager"
              class={cn(classes?.contentBelowActions?.image)}
            />
          )
        }
        {
          contentBelowActions?.text?.map((t: string, index: number) => (
            <Fragment key={index}>
              <p set:html={t} class={cn(classes?.contentBelowActions?.text)} />
            </Fragment>
          ))
        }
      </div>
      <div class="basis-1/2">
        {
          image && (
            <div class="relative m-auto max-w-5xl intersect-once intercept-no-queue motion-safe:md:intersect:animate-fade intersect-quarter">
              <CustomImage class="mx-auto w-full" width={1000} src={image?.src} alt={image?.alt} loading="eager" />
            </div>
          )
        }
      </div>
    </div>
  </div>
</section>

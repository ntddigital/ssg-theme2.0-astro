---
import CustomImage from '@/components/common/CustomImage.astro';
import Button from '@/components/ui/Button/Button.astro';
import { cn } from '@/utils/cn';
// import type { Hero as Props } from "@/types";

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,
  description = await Astro.slots.render('description'),
  actions = await Astro.slots.render('actions'),
  image = await Astro.slots.render('image'),
  isDark = await Astro.slots.render('isDark'),

  classes = {},
  id,

  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<section
  class={cn('relative md:-mt-[76px] not-prose', classes?.container, isDark && 'bg-dark dark:bg-transparent dark')}
  {...id ? { id } : {}}
>
  <div class="absolute inset-0 pointer-events-none" aria-hidden="true">
    <slot name="bg">
      {bg ? <Fragment set:html={bg?.src} /> : null}
    </slot>
  </div>
  <div class={cn('relative max-w-7xl mx-auto px-4 sm:px-6')}>
    <div class="pt-0 md:pt-[76px] pointer-events-none"></div>
    <div class="py-12 md:py-20">
      <div class="text-center pb-10 md:pb-16 max-w-5xl mx-auto">
        {
          tagline && (
            <p
              class={cn(
                'dark:text-white text-base text-secondary  font-bold tracking-wide uppercase intersect-once intersect-quarter motion-safe:md:intersect:animate-fade',
                classes?.tagline
              )}
              set:html={tagline}
            />
          )
        }
        {
          title && (
            <h1
              class={cn(
                'text-5xl md:text-6xl font-bold leading-relaxed mb-4 font-heading dark:text-white intersect-once intersect-quarter motion-safe:md:intersect:animate-fade',
                classes?.title
              )}
              set:html={title}
            />
          )
        }
        <div class="max-w-3xl mx-auto">
          {
            subtitle && (
              <p
                class={cn(
                  'text-xl text-muted mb-6 dark:text-white intersect-once intersect-quarter motion-safe:md:intersect:animate-fade',
                  classes?.subtitle
                )}
                set:html={subtitle}
              />
            )
          }{
            description && (
              <p
                class={cn(
                  'text-lg text-muted mb-6 dark:text-white intersect-once intersect-quarter motion-safe:md:intersect:animate-fade',
                  classes?.description
                )}
                set:html={description}
              />
            )
          }

          {
            actions && (
              <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4 intersect-once intersect-quarter motion-safe:md:intersect:animate-fade">
                {Array.isArray(actions) ? (
                  actions.map((action) => (
                    <div class="flex w-full sm:w-auto">
                      <Button {...(action || {})} class="w-full sm:mb-0" />
                    </div>
                  ))
                ) : (
                  <Fragment set:html={actions} />
                )}
              </div>
            )
          }
        </div>
      </div>
      <div class="intersect-once intercept-no-queue intersect-quarter motion-safe:md:intersect:animate-fade">
        {
          image && (
            <div class="relative m-auto max-w-5xl">
              {typeof image === 'string' ? (
                <Fragment set:html={image} />
              ) : (
                <CustomImage src={image?.src} alt={image?.alt} width={1280} loading="eager" />
              )}
            </div>
          )
        }
      </div>
    </div>
  </div>
</section>

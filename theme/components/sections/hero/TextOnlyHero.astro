---
import Button from '@/components/ui/Button/Button.astro';
import { cn } from '@/utils/cn';
const {
  title = await Astro.slots.render('title'),
  tagline,
  description = await Astro.slots.render('description'),
  actions = await Astro.slots.render('actions'),
  isDark = await Astro.slots.render('isDark'),

  id,

  classes = {},
} = Astro.props;
---

<section
  class={cn(
    'relative isolate overflow-hidden flex items-center justify-center',
    classes?.container,
    isDark && 'bg-dark dark:bg-transparent dark'
  )}
  {...id ? { id } : {}}
>
  <div class="relative isolate px-6 pt-14 lg:px-8">
    <div aria-hidden="true" class="absolute inset-x-0 -top-40 -z-10 transform-gpu overflow-hidden blur-3xl sm:-top-80">
      <div
        style={{
          clipPath:
            'polygon(74.1% 44.1%, 100% 61.6%, 97.5% 26.9%, 85.5% 0.1%, 80.7% 2%, 72.5% 32.5%, 60.2% 62.4%, 52.4% 68.1%, 47.5% 58.3%, 45.2% 34.5%, 27.5% 76.7%, 0.1% 64.9%, 17.9% 100%, 27.6% 76.8%, 76.1% 97.7%, 74.1% 44.1%)',
        }}
        class="relative left-[calc(50%-11rem)] aspect-1155/678 w-[36.125rem] -translate-x-1/2 rotate-[30deg] bg-linear-to-tr from-[#ff80b5] to-[#9089fc] opacity-30 sm:left-[calc(50%-30rem)] sm:w-[72.1875rem]"
      >
      </div>
    </div>
    <div class="mx-auto max-w-2xl py-16 sm:py-24 lg:py-30">
      <div class="hidden sm:mb-8 sm:flex sm:justify-center">
        <div
          class={cn(
            'dark:text-white font-bold relative rounded-full px-3 py-1 text-sm/6 text-gray-600 ring-1 ring-gray-900/10 hover:ring-gray-900/20',
            classes?.tagline
          )}
          set:html={tagline}
        />
      </div>
      <div class="text-center">
        <h1
          class={cn(
            'dark:text-white text-5xl font-semibold tracking-tight text-balance text-gray-900 sm:text-7xl',
            classes?.title
          )}
          set:html={title}
        />
        <p
          class={cn(
            'dark:text-white mt-8 text-lg font-medium text-pretty text-gray-500 sm:text-xl/8',
            classes?.description
          )}
          set:html={description}
        />
        <div class="mt-10 flex items-center justify-center gap-x-6">
          {
            actions && (
              <div class="max-w-xs sm:max-w-md flex flex-nowrap flex-col sm:flex-row justify-left gap-4 intersect-once intersect-quarter motion-safe:md:intersect:animate-fade">
                {Array.isArray(actions) ? (
                  actions.map((action) => (
                    <div class="flex w-full sm:w-auto">
                      <Button {...(action || {})} class="w-full sm:mb-0" />
                    </div>
                  ))
                ) : (
                  <Fragment set:html={actions} />
                )}
              </div>
            )
          }
        </div>
      </div>
    </div>
  </div>
</section>

---
import CustomImage from '@/components/common/CustomImage.astro';
import Button from '@/components/ui/Button/Button.astro';
import { cn } from '@/utils/cn';

const {
  title = await Astro.slots.render('title'),
  tagline,
  description = await Astro.slots.render('description'),

  actions = await Astro.slots.render('actions'),
  image = await Astro.slots.render('image'),
  contentBelowActions = await Astro.slots.render('contentBelowActions'),
  isDark = await Astro.slots.render('isDark'),

  classes = {},

  id,
} = Astro.props;
---

<section
  class={cn('relative isolate px-6 lg:px-0', classes?.container, isDark && 'bg-dark dark:bg-transparent dark')}
  {...id ? { id } : {}}
>
  <div class="relative">
    <div class="mx-auto max-w-7xl">
      <div class="relative z-10 lg:w-full lg:max-w-2xl">
        <svg
          viewBox="0 0 100 100"
          preserveAspectRatio="none"
          aria-hidden="true"
          class="absolute inset-y-0 right-8 hidden h-full w-80 translate-x-1/2 transform fill-white lg:block"
        >
          <polygon points="0,0 90,0 50,100 0,100"></polygon>
        </svg>

        <div class="relative px-6 py-16 sm:py-20 lg:px-8 lg:pr-0 flex justify-center">
          <div class="mx-auto max-w-2xl lg:mx-0 lg:max-w-xl">
            <div class="hidden sm:mb-10 sm:flex">
              <div
                class={cn(
                  'dark:text-white font-bold relative rounded-full px-3 py-1 text-sm/6 text-gray-500 ring-1 ring-gray-900/10 hover:ring-gray-900/20',
                  classes?.tagline
                )}
                set:html={tagline}
              />
            </div>
            <h1
              class={cn(
                'dark:text-white text-5xl font-semibold tracking-tight text-pretty text-gray-900 sm:text-5xl md:text-6xl xl:text-7xl',
                classes?.title
              )}
              set:html={title}
            />
            <p
              class={cn(
                'dark:text-white mt-8 text-lg font-medium text-pretty text-gray-500 sm:text-xl/8',
                classes?.description
              )}
              set:html={description}
            />
            <div class="mt-10 flex items-center gap-x-6">
              {
                actions && (
                  <div class="max-w-xs sm:max-w-md flex flex-nowrap flex-col sm:flex-row justify-left gap-4 intersect-once intersect-quarter motion-safe:md:intersect:animate-fade">
                    {Array.isArray(actions) ? (
                      actions.map((action) => (
                        <div class="flex w-full sm:w-auto">
                          <Button {...(action || {})} class="w-full sm:mb-0" />
                        </div>
                      ))
                    ) : (
                      <Fragment set:html={actions} />
                    )}
                  </div>
                )
              }
            </div>
            {
              contentBelowActions?.image?.src && (
                <CustomImage
                  alt={contentBelowActions?.image?.alt}
                  src={contentBelowActions?.image?.src}
                  loading="eager"
                  class={cn(classes?.contentBelowActions?.image)}
                />
              )
            }
            {
              contentBelowActions?.text?.map((t: string, index: number) => (
                <Fragment key={index}>
                  <p set:html={t} class={cn(classes?.contentBelowActions?.text)} />
                </Fragment>
              ))
            }

            <!-- <slot class={cn('dark:text-white', classes?.contentBelowActions)} set:html={contentBelowActions} /> -->
          </div>
        </div>
      </div>
    </div>
    <div class="bg-gray-50 lg:absolute lg:inset-y-0 lg:right-0 lg:w-1/2">
      <CustomImage
        alt={image?.alt}
        src={image?.src}
        loading="eager"
        class={cn('w-full bg-gray-50 object-cover lg:absolute lg:inset-0 lg:aspect-auto lg:h-full', classes?.image)}
      />
    </div>
  </div>
</section>

---
import CustomImage from "@/components/common/CustomImage.astro";
import Button from "@/components/ui/Button/Button.astro";
import { cn } from "@/utils/cn";
const {
  title = await Astro.slots.render("title"),
  tagline,
  description = await Astro.slots.render("description"),
  contentBelowActions = await Astro.slots.render("contentBelowActions"),
  actions = await Astro.slots.render("actions"),
  image = await Astro.slots.render("image"),
  isDark = await Astro.slots.render("isDark"),

  classes = {},
  id,
} = Astro.props;
---

<section
  class={cn(
    "relative",
    classes?.container,
    isDark && "bg-dark dark:bg-transparent dark"
  )}
  {...id ? { id } : {}}
>
  <div class="mx-auto max-w-7xl lg:grid lg:grid-cols-12 lg:gap-x-8 lg:px-8">
    <div
      class="px-6 pt-5 pb-24 sm:pb-32 lg:col-span-7 lg:px-0 lg:pt-20 lg:pb-48 xl:col-span-6"
    >
      <div class="mx-auto max-w-lg lg:mx-0">
        <div class="sm:mt-32 flex lg:mt-16">
          <div
            class={cn(
              "dark:text-white font-bold mt-5 relative rounded-full px-3 py-1 text-sm/6 text-gray-500 ring-1 ring-gray-900/10 hover:ring-gray-900/20",
              classes?.tagline
            )}
            set:html={tagline}
          />
        </div>
        <h1
          class={cn(
            "dark:text-white mt-5 text-5xl font-semibold tracking-tight text-pretty text-gray-900 sm:mt-10 sm:text-6xl",
            classes?.title
          )}
          set:html={title}
        />
        <p
          class={cn(
            "dark:text-white mt-8 text-lg font-medium  text-pretty text-gray-500  sm:text-xl",
            classes?.description
          )}
          set:html={description}
        />
        <div class="mt-10 flex items-center gap-x-6">
          {
            actions && (
              <div class="max-w-xs sm:max-w-md flex flex-nowrap flex-col sm:flex-row justify-left gap-4 intersect-once intersect-quarter motion-safe:md:intersect:animate-fade">
                {Array.isArray(actions) ? (
                  actions.map((action) => (
                    <div class="flex w-full sm:w-auto">
                      <Button {...(action || {})} class="w-full sm:mb-0" />
                    </div>
                  ))
                ) : (
                  <Fragment set:html={actions} />
                )}
              </div>
            )
          }
        </div>
        {
          contentBelowActions?.image?.src && (
            <CustomImage
              alt={contentBelowActions?.image?.alt}
              src={contentBelowActions?.image?.src}
              loading="eager"
              class={cn(classes?.contentBelowActions?.image)}
            />
          )
        }
        {
          contentBelowActions?.text?.map((t: string, index: number) => (
            <Fragment key={index}>
              <p set:html={t} class={cn(classes?.contentBelowActions?.text)} />
            </Fragment>
          ))
        }
      </div>
    </div>
    <div
      class="relative lg:col-span-5 lg:-mr-8 xl:absolute xl:inset-0 xl:left-1/2 xl:mr-0"
    >
      <CustomImage
        alt=""
        src={image?.src}
        class="w-full bg-gray-50 object-cover lg:absolute lg:inset-0 lg:aspect-auto lg:h-full"
        loading="eager"
      />
    </div>
  </div>
</section>

---
import { Icon } from 'astro-icon/components';
import Button from '@/components/ui/Button/Button.astro';
import Headline from '@/components/ui/Headline.astro';
import WidgetWrapper from '@/components/ui/WidgetWrapper.astro';
import type { Pricing as Props } from '@/types';
import TabResponsiveTable from '@/components/ui/Table/TabResponsiveTable.jsx';
import { cn } from '@/utils/cn';

const {
  title = '',
  subtitle = '',
  tagline = '',
  prices = [],
  columns = 2,

  tableItems = await Astro.slots.render('tableItems'),
  // actions = await Astro.slots.render('actions'),
  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`${classes?.container ?? ''}`} bg={bg}>
  <Headline title={title} subtitle={subtitle} tagline={tagline} />
  <div class="flex items-stretch justify-center mt-8 sm:mt-14">
    <div
      class={cn(
        'grid grid-cols-1 gap-8 dark:text-white sm:grid-cols-2 md:grid-cols-2',
        columns === 3 ? 'lg:grid-cols-3 xl:grid-cols-3 gap-6' : '',
        columns === 4 ? 'lg:grid-cols-4 xl:grid-cols-4 gap-3' : ''
      )}
    >
      {
        prices &&
          prices?.map(
            ({
              title,
              subtitle,
              price,
              comparePrice,
              period,
              items,
              actions,
              hasRibbon = false,
              ribbonTitle,
              classes,
            }) => (
              <div class="col-span-3 mx-auto flex w-full sm:col-span-1 md:col-span-1 lg:col-span-1 xl:col-span-1 intersect-once motion-safe:md:intersect:animate-fade intersect-quarter">
                {price && period && (
                  <div
                    class={cn(
                      'relative rounded-lg backdrop-blur border border-gray-200 dark:bg-gray-500 shadow px-6 py-8 flex w-full max-w-sm flex-col justify-between text-center',
                      classes?.tabPanel
                    )}
                  >
                    {hasRibbon && ribbonTitle && (
                      <div class="absolute right-[-5px] 2xl:right-[-8px] rtl:right-auto rtl:left-[-8px] rtl:2xl:left-[-10px] top-[-5px] 2xl:top-[-10px] z-[1] h-[100px] w-[100px] overflow-hidden text-right">
                        <span class="absolute top-[19px] right-[-21px] rtl:right-auto rtl:left-[-21px] block w-full rotate-45 rtl:-rotate-45 bg-primary text-center text-[10px] font-bold uppercase leading-5 text-white shadow-[0_3px_10px_-5px_rgba(0,0,0,0.3)] before:absolute before:left-0 before:top-full before:z-[-1] before:border-[3px] before:border-r-transparent before:border-b-transparent before:border-l-green-800 before:border-t-green-800 before:content-[''] after:absolute after:right-0 after:top-full after:z-[-1] after:border-[3px] after:border-l-transparent after:border-b-transparent after:border-r-green-800 after:border-t-green-800 after:content-['']">
                          {ribbonTitle}
                        </span>
                      </div>
                    )}
                    <div class="px-2 py-0">
                      {title && (
                        <h3
                          class={cn(
                            'text-center text-xl font-semibold uppercase leading-6 tracking-wider mb-2',
                            classes?.title
                          )}
                        >
                          {title}
                        </h3>
                      )}
                      {subtitle && (
                        <p class={cn('font-light sm:text-lg text-gray-600', classes?.subtitle)}>{subtitle}</p>
                      )}
                      <div class="my-8">
                        <div class="flex items-center justify-center text-center mb-1">
                          {/* <span class="text-5xl">$</span> */}
                          <div class="flex gap-4 items-end">
                            <span class={cn('text-6xl font-extrabold', classes?.price)}>{price}</span>
                            <span class={cn('text-3xl font-extrabold line-through', classes?.comparePrice)}>
                              {comparePrice}
                            </span>
                          </div>
                        </div>
                        <span class={cn('text-base leading-6 lowercase text-gray-600', classes?.period)}>{period}</span>
                      </div>
                      {items && (
                        <ul class="my-8 md:my-10 space-y-2 text-left">
                          {items.map(
                            ({ description, icon }) =>
                              description && (
                                <li class="mb-1.5 flex items-start space-x-3 leading-9">
                                  <div class={cn('rounded-full bg-primary mt-1', classes?.iconBg)}>
                                    <Icon
                                      name={icon ? icon : 'tabler:check'}
                                      class={cn('w-5 h-5 font-bold p-1 text-white', classes?.icon)}
                                    />
                                  </div>
                                  <span>{description}</span>
                                </li>
                              )
                          )}
                        </ul>
                      )}
                    </div>
                    {/* {callToAction && (
                      <div class={cn(`flex justify-center`, classes?.callToAction)}>
                        {typeof callToAction === 'string' ? (
                          <Fragment set:html={callToAction} />
                        ) : (
                          callToAction &&
                          callToAction.href && (
                            <Button {...(hasRibbon ? { variant: 'primary' } : {})} {...callToAction}/>
                          )
                        )}
                      </div>
                    )} */}
                    {actions && (
                      <div class="max-w-xs sm:max-w-md flex flex-nowrap flex-col sm:flex-row justify-left gap-4 intersect-once intersect-quarter motion-safe:md:intersect:animate-fade">
                        {Array.isArray(actions) ? (
                          actions.map((action) => (
                            <div class="flex w-full sm:w-auto mx-auto">
                              <Button {...(action || {})} class={cn('w-full sm:mb-0', classes?.action)} />
                            </div>
                          ))
                        ) : (
                          <Fragment set:html={actions} />
                        )}
                      </div>
                    )}
                  </div>
                )}
              </div>
            )
          )
      }
    </div>
  </div>
  {tableItems && <TabResponsiveTable items={tableItems} client:load />}
</WidgetWrapper>

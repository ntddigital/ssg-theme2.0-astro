---
import WidgetWrapper from '@/components/ui/WidgetWrapper.astro';
import HorizontalTimeline from '@/components/ui/timeline/HorizontalTimeline.astro';
import Headline from '@/components/ui/Headline.astro';
import CustomImage from '@/components/common/CustomImage.astro';
import ItemGrid2 from '@/components/ui/ItemGrid/ItemGrid2.astro';
import { cn } from '@/utils/cn';
// import type { Steps as Props } from "@/types";

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline = await Astro.slots.render('tagline'),
  description = await Astro.slots.render('description'),
  steps = [],
  items = [],
  columns = await Astro.slots.render('columns'),
  defaultIcon = await Astro.slots.render('defaultIcon'),
  image = await Astro.slots.render('image'),
  isReversed = false,

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<WidgetWrapper id={id} isDark={isDark} containerClass={` ${classes?.container ?? ''}`} bg={bg}>
  <div class:list={['flex flex-col gap-8 md:gap-12', { 'md:flex-row-reverse': isReversed }]}>
    <div class:list={['md:py-4 md:self-center', { 'md:basis-1/2': image }, { 'w-full': !image }]}>
      <Headline
        title={title}
        subtitle={subtitle}
        tagline={tagline}
        description={description}
        classes={classes?.headline as Record<string, string>}
      />
      <!-- classes={{
        container: "text-left rtl:text-right",
        title: "text-3xl lg:text-4xl",
        ...((classes?.headline as object) ?? {}),
      }} -->
      <HorizontalTimeline steps={steps} />
      <ItemGrid2
        items={items}
        columns={columns}
        defaultIcon={defaultIcon}
        classes={{
          container: 'gap-6 sm:mt-6 lg:mt-12',
          panel:
            'text-center bg-page md:text-left rtl:md:text-right md:items-start sm:p-6 rounded-md shadow-xl dark:shadow-none dark:border dark:border-slate-800',
          icon: 'w-12 h-12 mb-6 text-primary',
          ...((classes?.items as Record<string, never>) ?? {}),
        }}
      />
    </div>
    {
      image && (
        <div class="relative md:basis-1/2">
          {typeof image === 'string' ? (
            <Fragment set:html={image} />
          ) : (
            <CustomImage class={cn(classes?.image)} width={432} src={image?.src} alt={image?.alt || ''} />
          )}
        </div>
      )
    }
  </div>
</WidgetWrapper>

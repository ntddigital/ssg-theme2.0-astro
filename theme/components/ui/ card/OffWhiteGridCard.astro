---
import { cn } from '@/utils/cn';
import { Icon } from 'astro-icon/components';
import CustomImage from '@/components/common/CustomImage.astro';
type TestimonialsData = {
  author: { handle: string; imageUrl: string | null | undefined; name: string };
  rating: { maxStars: number; rating: number };
  body: string;
};
const { items = [], classes = {} } = Astro.props;
const getRandomColor = () => {
  const colors = [
    'bg-red-700',
    'bg-blue-700',
    'bg-green-700',
    'bg-yellow-700',
    'bg-purple-700',
    'bg-pink-700',
    'bg-orange-700',
    'bg-teal-700',
    'bg-indigo-700',
    'bg-lime-700',
    'bg-cyan-700',
    'bg-amber-700',
    'bg-rose-700',
    'bg-fuchsia-700',
    'bg-emerald-700',
    'bg-sky-700',
    'bg-violet-700',
    'bg-stone-700',
    'bg-gray-700',
    'bg-zinc-700',
  ];
  return colors[Math.floor(Math.random() * colors.length)];
};

const getInitial = (name: string) => {
  return name ? name.charAt(0).toUpperCase() : '?';
};
---

<div class="mx-auto max-w-7xl px-6 lg:px-8">
  <div class="mx-auto mt-16 flow-root max-w-2xl sm:mt-20 lg:mx-0 lg:max-w-none">
    <div class="-mt-8 sm:-mx-4 sm:columns-2 sm:text-[0] lg:columns-3">
      {
        items?.map((testimonial: TestimonialsData) => (
          <Fragment key={testimonial?.body}>
            <div class={cn('pt-8 sm:inline-block sm:w-full sm:px-4', classes?.body)}>
              <figure class="rounded-2xl bg-gray-50 p-8 text-lg/6">
                {testimonial?.body && (
                  <blockquote class="text-gray-900">
                    <p>{`“${testimonial?.body}”`}</p>
                  </blockquote>
                )}
                <div class="mt-6 flex items-center gap-x-4">
                  {
                    //  avatar
                    testimonial?.author?.imageUrl ? (
                      <CustomImage alt="" src={testimonial?.author?.imageUrl} class="size-10 rounded-full bg-gray-50" />
                    ) : (
                      <div class={`size-10 rounded-full flex items-center justify-center ${getRandomColor()}`}>
                        <span class="text-white text-lg font-bold">{getInitial(testimonial?.author?.name)}</span>
                      </div>
                    )
                  }
                  <div>
                    {testimonial?.author?.name && (
                      <div class="font-semibold text-gray-900">{testimonial?.author?.name}</div>
                    )}
                    {testimonial?.author?.handle && (
                      <div class="text-gray-600">{`@${testimonial?.author?.handle}`}</div>
                    )}
                    {testimonial?.rating?.rating && (
                      <div>
                        <span class="sr-only">{` ${testimonial.rating.rating} out of ${testimonial.rating.maxStars || 5} stars`}</span>
                        <div class="flex items-center mt-1">
                          {Array.from({ length: testimonial?.rating?.maxStars || 5 }, (_, index) => (
                            <Fragment key={index}>
                              <Icon
                                name="tabler:star-filled"
                                class={cn(
                                  index < testimonial.rating.rating ? 'text-yellow-400' : 'text-gray-300',
                                  'size-4.5 shrink-0'
                                )}
                                aria-hidden="true"
                              />
                            </Fragment>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </figure>
            </div>
          </Fragment>
        ))
      }
    </div>
  </div>
</div>
<div></div>
